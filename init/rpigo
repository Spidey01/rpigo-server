#! /bin/sh
### BEGIN INIT INFO
# Provides:          rpigo
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: RPIGO Raspberry PI Goofing Off.
# Description:       The RPIGO Daemon Horde.
### END INIT INFO

# Author: Terry M. Poulin <BigBoss1964@gmail.com>
#

#
# START SETUP
#
DAEMON=RPIGO_BINDIR/rpigo-init
DAEMON_USER="RPIGO_USERNAME"
DAEMON_ARGS=""
PIDFILE=/var/run/rpigo/init.pid
#
# END SETUP
#
[ -r /etc/default/rpigo ] && . /etc/default/rpigo

# Exit if the we're not handy.
[ -x "$DAEMON" ] || exit 0


do_start() {
    start-stop-daemon --chuid "$DAEMON_USER" --start --quiet \
        --background --pidfile "$PIDFILE" \
        --exec $DAEMON -- $DAEMON_ARGS \
        || return 2
}


do_stop() {
    #start-stop-daemon --stop --pidfile "$PIDFILE" --name $DAEMON
    echo "TODO: proper shutdown."
    exit 2
}


do_status() {
    local PID
    pid="$(cat $PIDFILE 2>/dev/null)"

    if [ ! -f "$PIDFILE" ] || [ -z "$pid" ]; then
        echo "rpigo is not running"
        return 3
    fi

    if ps "$pid" >/dev/null 2>&1; then
        echo "rpigo is running"
        return 0
    else
        echo "rpigo is not running"
        return 1
    fi

}


#######################################################################
#                                                                     #
# Be sysvinit friendly after this point. Or at least Debian friendly. #
#                                                                     #
#######################################################################


# Load the VERBOSE setting and other rcS variables
[ -r /lib/init/vars.sh ] && . /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
#
[ -r /lib/lsb/init-function ]. /lib/lsb/init-functions
if ! type log_daemon_msg >/dev/null 2>/dev/null; then
    log_daemon_msg() {
        true
    }
fi
if ! type log_end_msg >/dev/null 2>/dev/null; then
    log_end_msg() {
        true
    }
fi


case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
            2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
    restart)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
            do_start
            case "$?" in
                0) log_end_msg 0 ;;
                1) log_end_msg 1 ;; # Old process is still running
                *) log_end_msg 1 ;; # Failed to start
            esac
            ;;
          *)
            # Failed to stop
            log_end_msg 1
            ;;
        esac
        ;;
    status)
        do_status
        exit $?
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac


exit 0

