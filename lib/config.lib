#
# config.lib -- library for handling .conf files and such.
#

#
# Parse config and evaluate as environment variables.
#
# usage: config_eval [-p PREFIX] [-S SUFFIX] file
#
#   -p => prefix evaluated variable names with PREFIX.
#   -s => append evaluate variable names with SUFFIX.
#
config_eval() {
    local fn opt prefix suffix filename line line_number var_name var_value

    fn="${FUNCNAME[0]}()"

    while getopts "p:s:" opt; do
        case $opt in
            p)
                prefix="$OPTARG"
                ;;
            s)
                suffix="$OPTARG"
                ;;
            \?)
                echo "$fn: Invalid option: -$OPTARG" 1>&2
                return $OPTERR
                ;;
        esac
    done
    shift `expr $OPTIND - 1`

    for filename 
    do
        rpigo_debug "SOF $filename"
        line_number=0
        while read line
        do
            line_number=$(($line_number + 1))
            rpigo_trace "$fn: line='$line'"
            [ -z "$line" ] && continue
            echo $line | grep -q '#' && continue

            var_name="$(echo $line | sed -e 's/\s*=\s*/\n/g' | head -n 1)"
            var_value="$(echo $line | sed -e 's/\s*=\s*/\n/g' | tail -n 1)"

            rpigo_trace "$fn:${filename}:${line_number}: " \
                "eval planned: '${prefix}${var_name}${suffix}=${var_value}'"
            eval "${prefix}${var_name}${suffix}=${var_value}"

        done < "$filename"
        rpigo_debug "EOF $filename"
    done
}

#
# Grep config and print the key and value on seperate lines.
#
config_grep() {
    grep "$@" | grep -v '#'
}

