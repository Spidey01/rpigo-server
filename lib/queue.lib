# vim: set filetype=sh :
#-
# Copyright (c) 2014-current, Terry Mathew Poulin <BigBoss1964@gmail.com>
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# queue.lib -- a simple message queue for shell.
#

#
# Setup the queue and export RPIGO_QUEUE for subprocesses to use.
# Only call this from the startup program.
# This is a noop if RPIGO_QUEUE is already set.
#
rpigo_queue_setup() {
    local fn

    fn="${FUNCNAME[0]}()"

    if [ -n "$RPIGO_QUEUE" ]; then
        rpigo_warn "$fn: RPIGO_QUEUE already setup. Skipping."
        return
    fi

    if [ -z "$1" ]; then
        RPIGO_QUEUE="${RPIGO_SPOOLDIR}/queue"
        if [ ! -d "$RPIGO_QUEUE" ]; then
            rpigo_sudo mkdir -m 0700 -p "$RPIGO_QUEUE"
            rpigo_sudo chown "$(id -u)" "$RPIGO_QUEUE"
        fi
    else
        rpigo_debug "$fn: Using \$1=$1."
        RPIGO_QUEUE="$1"
        mkdir -p "$RPIGO_QUEUE"
    fi
    if [ $? -ne 0 ]; then
        rpigo_fatal -e 73 "$fn: Failed." # EX_CANTCREATE
    fi
    rpigo_debug "$fn: export RPIGO_QUEUE='$RPIGO_QUEUE'"
    export RPIGO_QUEUE
}


#
#
#
rpigo_queue_wait() {
    if [ -z "$RPIGO_QUEUE" ]; then
        rpigo_error 'rpigo_queue_wait(): no RPIGO_QUEUE to wait on. Did you call setup?'
        return 69 # EX_UNAVAILABLE service unavailable.
    fi

    if type inotifywait >/dev/null; then
        inotifywait --exclude '.fifo$' -m -q -e create --format "%w%f" "$RPIGO_QUEUE"
    else
        rpigo_error "INOTIFYWAIT NOT INSTALLED."
        rpigo_warn 'Install inotify-tools or port me to your OS!'
        rpigo_fatal -e 72 "Critical OS file missing." # EX_OSFILE.
    fi
}


# rpigo_queue_send DAEMON COMMAND...
#
# Send COMMAND to the specified DAEMON. Anything after COMMAND will be sent as words.
# DAEMON must be monitoring the queue, e.g. using rpigo_queue_wait().
# How COMMAND will be processed if at all is up to DAEMON to work through.
#
rpigo_queue_send() {
    local to_daemon command message_file

    to_daemon="$1"
    shift
    command="$*"

    #
    # Calculate some valid name for message_file.
    # We are the ONLY function who creates these.
    # Daemons look for '{name}.*' files showing up in the queue.
    #
    # In <= v0.5 this was done in rpigo-authd and used a sequential integer.
    # In v0.6 this function was created.  We now use the process ID and a timestamp.
    #

    message_file="${RPIGO_QUEUE}/${to_daemon}.$$.$(date "+%Y-%m-%d.%Z.%H%M.%N")"
    
    rpigo_debug "message_file will be: $message_file"
    rpigo_debug "COMMAND will be: $command"

    echo "$command" > $message_file
    #rpigo_debug "rm -f => $message_file"
}


# Add commands in script to the queue.
#
rpigo_queue_script() {
    local command fn script to_daemon 

    fn="${FUNCNAME[0]}()"
    script="$1"



    rpigo_info "$fn: Executing script $script"

    while read command
    do
        # skip comments ^_^.
        echo "$command" | grep -qE '^#' && continue

        rpigo_trace "$fn: command '$command' in script '$command'"

        to_daemon="$(rpigo_which_daemon "$command")"

        if [ -z "$to_daemon" ]; then
            rpigo_warn "unknown command: '$command'"
            return 76 # EX_PROTOCOL
        fi
        rpigo_queue_send "$to_daemon" $command
    done < "$script"
}


